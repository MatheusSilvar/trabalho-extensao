from dotenv import load_dotenv
import os
from dataclasses import dataclass
from typing import List, Dict, Any, Optional
from pydantic_ai import Agent, RunContext
from pydantic_ai.models.gemini import GeminiModel
from pydantic_ai.providers.google_gla import GoogleGLAProvider
from pydantic_ai.messages import ModelMessagesTypeAdapter
from pydantic_core import to_jsonable_python
import logfire
import json
from datetime import datetime

import asyncio

# Load environment variables
load_dotenv()

#inicializacao do logfire
logfire.configure()  
logfire.instrument_pydantic_ai()

# Prompt do assistente
PROMPT = '''
Voc√™ √© um assistente virtual especializado em responder d√∫vidas frequentes sobre a **PUC Campinas**. Forne√ßa respostas claras, objetivas e atualizadas sobre:  

- Cursos  
- Vestibular  
- Estrutura  
- Localiza√ß√£o  
- Formas de ingresso  
- Contato  
- Servi√ßos oferecidos pela universidade  

Caso a pergunta seja fora do escopo ou voc√™ n√£o saiba a resposta, oriente o usu√°rio a consultar o site oficial da PUC Campinas ou entrar em contato com a central de atendimento, enviando o seguinte link:  
 https://www.puc-campinas.edu.br/

Forne√ßa uma experi√™ncia personalizada, utilize as informa√ß√µes que voc√™ tem do usu√°rio ao seu favor. Chame o usu√°rio pelo nome quando poss√≠vel e utilizando uma linguagem amig√°vel.

---

## Perguntas frequentes e respostas:

### 1. Qual √© a frequ√™ncia m√≠nima exigida para aprova√ß√£o nas disciplinas?  
A frequ√™ncia m√≠nima obrigat√≥ria √© de **75%** das aulas ministradas e/ou atividades realizadas em cada disciplina.  

---

### 2. Como posso solicitar aproveitamento de estudos ou dispensa de disciplinas?  
Voc√™ pode solicitar o aproveitamento de estudos ou a dispensa de disciplinas por meio da **Central de Atendimento ao Aluno (CAA)**, acessando a **√Årea Logada do Aluno** no Portal da Universidade.  

---

### 3. Onde encontro o calend√°rio acad√™mico e informa√ß√µes sobre o cotidiano universit√°rio?  
O **Manual do Aluno da Gradua√ß√£o** cont√©m o calend√°rio acad√™mico e diversas informa√ß√µes sobre o cotidiano na PUC-Campinas. Ele est√° dispon√≠vel no **site oficial da universidade**.  

---

## Educa√ß√£o Digital (EAD)

### 4. Os cursos de Educa√ß√£o Digital da PUC-Campinas s√£o totalmente a dist√¢ncia?  
Sim, os cursos de Educa√ß√£o Digital s√£o **totalmente a dist√¢ncia**, sem encontros presenciais.  

---

### 5. O diploma de um curso EAD tem a mesma validade que o presencial?  
Sim, os diplomas de cursos a dist√¢ncia reconhecidos possuem a **mesma validade** que os presenciais, conforme legisla√ß√£o vigente.  

---

### 6. Qual √© a dedica√ß√£o exigida em um curso de Educa√ß√£o Digital?  
Os cursos a dist√¢ncia exigem **muita dedica√ß√£o**, demandando tempo e comprometimento semelhantes ou at√© maiores que os cursos presenciais.  

---

## P√≥s-Gradua√ß√£o e Certificados

### 7. Ap√≥s o pagamento, em quanto tempo recebo acesso ao Ambiente Virtual de Aprendizagem?  
Em at√© **2 horas** ap√≥s o pagamento, voc√™ receber√° os dados de acesso √† plataforma de estudos pelo **e-mail cadastrado**. Se o pagamento for via **boleto**, os dados ser√£o enviados em at√© **48 horas**.  

---

### 8. Como √© o certificado dos cursos de P√≥s-Gradua√ß√£o oferecidos em parceria com a PUCPR?  
Os certificados dos cursos de P√≥s-Gradua√ß√£o em parceria com a **PUCPR** seguem os **padr√µes de qualidade e reconhecimento** das institui√ß√µes envolvidas.  

---

## Infraestrutura e Servi√ßos

### 9. Posso utilizar os espa√ßos f√≠sicos da PUC-Campinas sendo aluno de curso a dist√¢ncia?  
Sim, os **campi da PUC-Campinas** est√£o dispon√≠veis para **todos os alunos**, proporcionando experi√™ncias de aprendizagem e oportunidades de networking.  

---

### 10. Quais servi√ßos posso solicitar na Central de Atendimento ao Aluno (CAA)?  
Na **CAA**, voc√™ pode solicitar:  

- Atualiza√ß√£o cadastral  
- Aproveitamento de estudos  
- Emiss√£o de documentos acad√™micos e financeiros  
- Entre outros servi√ßos  

'''

class ConversaComMemoria:
    """Gerenciador de conversa com mem√≥ria usando pydantic-ai"""
    
    def __init__(self, estado_sessao: dict):
        self.estado_sessao = estado_sessao
        self.historico_mensagens = []
        self.agent = self._criar_agente()
        self._loop = None
    
    def _criar_agente(self):
        """Cria o agente com prompt personalizado"""
        prompt_personalizado = self._criar_prompt_personalizado()
        
        modelo = GeminiModel(
            'gemini-2.0-flash', 
            provider=GoogleGLAProvider(api_key=os.getenv("GEMINI_API_KEY"))
        )
        
        return Agent(  
            model=modelo,
            output_retries=2,
            output_type=str,
            system_prompt=prompt_personalizado,
        )
    
    def _criar_prompt_personalizado(self):
        """Cria prompt personalizado com informa√ß√µes do usu√°rio"""
        nome = self.estado_sessao.get('nome_completo', 'Usu√°rio')
        tipo_usuario = self.estado_sessao.get('tipo_usuario', 'estudante')
        curso = self.estado_sessao.get('curso', 'N√£o informado')
        ra = self.estado_sessao.get('ra', 'N√£o informado')
        
        prompt_personalizado = f"""{PROMPT}

        Informa√ß√µes do usu√°rio:
        - Nome: {nome}
        - Tipo de usu√°rio: {tipo_usuario.title()}
        - RA: {ra}
        - Curso: {curso}
        """
        return prompt_personalizado
    
    def _get_or_create_loop(self):
        """Obt√©m ou cria um loop de eventos"""
        try:
            loop = asyncio.get_event_loop()
            if loop.is_closed():
                raise RuntimeError("Loop is closed")
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        return loop
    
    def conversar(self, mensagem_usuario: str):
        """Processa mensagem do usu√°rio mantendo o hist√≥rico"""
        try:
            loop = self._get_or_create_loop()
            
            # Executa o agente de forma s√≠ncrona
            resultado = loop.run_until_complete(
                self.agent.run(
                    mensagem_usuario, 
                    message_history=self.historico_mensagens,
                )
            )
            
            # Usa o hist√≥rico atualizado do resultado
            self.historico_mensagens = resultado.all_messages()
            
            return resultado.data
        
        except Exception as e:
            return f"Erro ao processar mensagem: {str(e)}"
    
    def limpar_historico(self):
        """Limpa o hist√≥rico de mensagens"""
        self.historico_mensagens = []
    
    def obter_historico_formatado(self):
        """Retorna o hist√≥rico formatado para exibi√ß√£o"""
        if not self.historico_mensagens:
            return "üìù Nenhuma mensagem no hist√≥rico"
        
        historico_formatado = []
        for i, msg in enumerate(self.historico_mensagens, 1):
            # Verifica o tipo de mensagem de forma mais robusta
            if hasattr(msg, 'content'):
                # Determina o papel baseado no tipo da mensagem ou role
                if hasattr(msg, 'role'):
                    if msg.role == 'user':
                        papel = "Usu√°rio"
                    elif msg.role == 'assistant':
                        papel = "Assistente"
                    else:
                        papel = "Sistema"
                else:
                    # Fallback baseado no tipo
                    tipo_msg = type(msg).__name__.lower()
                    if 'user' in tipo_msg:
                        papel = "Usu√°rio"
                    elif 'model' in tipo_msg or 'assistant' in tipo_msg:
                        papel = "Assistente"
                    else:
                        papel = "Sistema"
                
                conteudo = str(msg.content)
                if len(conteudo) > 100:
                    conteudo = conteudo[:100] + "..."
                historico_formatado.append(f"{i}. {papel}: {conteudo}")
        
        return "\n".join(historico_formatado)

def setup_agent(usuario_logado):
    """Fun√ß√£o para configurar e retornar uma inst√¢ncia da ConversaComMemoria"""
    return ConversaComMemoria(usuario_logado)